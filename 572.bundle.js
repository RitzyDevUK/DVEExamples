(()=>{"use strict";var e,t,r,s,a,i,o={27572:(e,t,r)=>{r.a(e,(async(e,t)=>{try{var s=r(82931),a=r(62158),i=r(6624);(new(r(58865).J)).init(),await(0,s.V)(),(0,i.A)(),(0,a.A)(),t()}catch(e){t(e)}}),1)},58865:(e,t,r)=>{r.d(t,{J:()=>bt});var s=r(3649),a=r(98261);class i{chunkDepth=16;chunkWidth=16;minHeight=60;worldHeight=256;noiseHeight=120;waterHeight=60;noise;brush;substanceTool;init(e){this.noise=e.noise,this.brush=e.brush,this.substanceTool=e.substanceTool}}const o=(e=[-1,1],t=[-1,1],r=[-1,1],s=[-10,-10],a=[-1,1],i=!1,o=!1,n=!1,d=!0,l=!1,c=!1)=>({temperature:e,moisture:t,elevation:r,river:s,mod:a,hardLimitMoisture:i,hardLimitTemperature:o,hardLimitElevation:n,hardLimitRiver:d,hardLimitMod:l,excludeRiver:c}),n=(e,t)=>t.temperature[0]<=e[0]&&t.temperature[0]>=e[1],d=(e,t)=>t.moisture[0]<=e[1]&&t.moisture[1]>=e[1],l=(e,t)=>t.elevation[0]<=e[2]&&t.elevation[1]>=e[2],c=(e,t)=>{let r=0,s=!1,a=0;if(!t.hardLimitTemperature||t.hardLimitTemperature&&n(e,t)){const s=(t.temperature[1]+t.temperature[0])/2;r+=1-Math.abs((e[0]-s)/(t.temperature[1]-t.temperature[0])),a++}else t.hardLimitTemperature&&!n(e,t)&&(s=!0);if(!t.hardLimitMoisture||t.hardLimitMoisture&&d(e,t)){const s=(t.moisture[1]+t.moisture[0])/2;r+=1-Math.abs((e[1]-s)/(t.moisture[1]-t.moisture[0])),a++}else t.hardLimitMoisture&&!d(e,t)&&(s=!0);if(!t.hardLimitElevation||t.hardLimitElevation&&l(e,t)){const s=(t.elevation[1]+t.elevation[0])/2;r+=1-Math.abs((e[2]-s)/(t.elevation[1]-t.elevation[0])),a++}else t.hardLimitElevation&&l(e,t)&&(s=!0);if(t.river[1]>0)if(!t.hardLimitRiver||t.hardLimitRiver&&((e,t)=>t.river[0]<=e[3]&&t.river[1]>=e[3])(e,t)){const s=(t.river[1]+t.river[0])/2;r+=1-Math.abs((e[3]-s)/(t.river[1]-t.river[0])),a++}else t.hardLimitRiver&&(s=!0);if(t.mod[1]>0&&void 0!==e[4])if(!t.hardLimitMod||t.hardLimitMod&&((e,t)=>t.mod[0]<=e[4]&&t.mod[1]>=e[4])(e,t)){const s=(t.mod[1]+t.mod[0])/2;r+=1-Math.abs((e[4]-s)/(t.mod[1]-t.mod[0])),a++}else t.hardLimitMod&&(s=!0);return s?0:r/(a||1)};class h{static _biomeTypes=new Map;static _biomes=new Map;static _caveCarver=new Map;static registerBiomes(...e){e.forEach((e=>this._biomes.set(e.data.id,e)))}static getBiome(e){const t=this._biomes.get(e);if(!t)throw new Error(`The biome with id ${e} does not exist.`);return t}static registerBiomeTypes(...e){e.forEach((e=>this._biomeTypes.set(e.data.id,e)))}static getBiomeType(e){const t=this._biomeTypes.get(e);if(!t)throw new Error(`The biome type with id ${e} does not exist.`);return t}static registerCaveCarver(...e){e.forEach((e=>this._caveCarver.set(e.data.id,e)))}static getCaveCarver(e){const t=this._caveCarver.get(e);if(!t)throw new Error(`The cave carver with id ${e} does not exist.`);return t}}class g{nodes;constructor(e){this.nodes=e}}const u=2**32;class m extends g{static data={id:"valley"};getCarved(e,t,r){const s=500;t+=1e5;let a=e+200*this.nodes.noise.detailNoise((e-u+1e5)/s,(t-u+1e5)/s,(r-u+1e5)/s),i=t+200*this.nodes.noise.detailNoise((e-u+1e5)/s,(t-u-1e5)/s,(r-u+1e5)/s),o=r+200*this.nodes.noise.detailNoise((e-u-1e5)/s*1.9,(t-u+1e5)/s,(r-u-1e5)/s)*1.9,n=this.nodes.noise.detailNoise((a-u)/100,(i-u)/100,(o-u)/100);const d=this.nodes.noise.worldGenDetailNoise((e+1e3)/s,(t+1e3)/s,(r+1e3)/s);return n=1-Math.abs(n-.5),n=Math.pow(n,16),n>.8&&d>.6}getData(){return m.data}getClass(){return m}}var b;!function(e){e.Snow="dc_snow",e.Stone="dc_stone",e.GrassBlock="dc_grass_block",e.Dirt="dc_dirt",e.Sand="dc_sand",e.Water="dc_water",e.Gravel="dc_gravel",e.Clay="dc_clay",e.Ice="dc_ice",e.Andesite="dc_andesite",e.Granite="dc_granite",e.CobbleStone="dc_cobble_stone",e.MossyCobbleStone="dc_mossy_cobble_stone",e.GlowStone="dc_glow_stone",e.OakLog="dc_oak_log",e.OakPlanks="dc_oak_planks",e.OakLeaves="dc_oak_leaves",e.SpruceLog="dc_spruce_log",e.SpruceLeaves="dc_spruce_leaves",e.SprucePlanks="dc_spruce_planks",e.SmoothAndesite="dc_smooth_andesite",e.SmoothGranite="dc_smooth_granite",e.Glass="dc_glass",e.Podzol="dc_podzol",e.EmeraldOre="dc_emerald_ore",e.GoldOre="dc_gold_ore",e.IronOre="dc_iron_ore",e.LapisOre="dc_lapis_ore",e.RedstoneOre="dc_redstone_ore",e.CoalBlock="dc_coal_block",e.DiamondBlock="dc_diamond_block",e.GoldBlock="dc_gold_block",e.IronBlock="dc_iron_block",e.Mycelium="dc_mycelium",e.TallFern="dc_tall_fern",e.TallGrass="dc_tall_grass",e.TallRose="dc_tall_rose",e.PaeoniaFlower="dc_paeonia_flower",e.SyringaFlower="dc_syringa_flower",e.BlueOrchidFlower="dc_blue_orchid_flower",e.DandelionFlower="dc_dandelion_flower",e.OxeyeDaisyFlower="dc_oxeye_daisy_flower",e.TulipFlower="dc_tulip_flower",e.WaterlilyFlower="dc_waterlily_flower",e.Vine="dc_vine",e.Fern="dc_fern",e.Reeds="dc_reeds",e.Kelp="dc_kelp",e.Cactus="dc_cactus",e.Grass="dc_grass",e.SeaGrass="dc_sea_grass",e.BrainCoral="dc_brain_coral",e.BrainCoralBlock="dc_brain_coral_block",e.BubbleCoral="dc_bubble_coral",e.BubbleCoralBlock="dc_bubble_coral_block",e.DeadBrainCoralBlock="dc_dead_brain_coral_block",e.DeadBubbleCoralBlock="dc_dead_bubble_coral_block",e.DeadFireCoral="dc_dead_fire_coral",e.DeadFireCoralBlock="dc_dead_fire_coral_block",e.DeadHornCoral="dc_dead_horn_coral",e.DeadHornCoralBlock="dc_dead_horn_coral_block",e.DeadTubeCoral="dc_dead_tube_coral",e.DeadTubeCoralBlock="dc_dead_tube_coral_block",e.DeadBrainCoral="dc_dead_brain_coral",e.DeadBubbleCoral="dc_dead_bubble_coral",e.FireCoral="dc_fire_coral",e.FireCoralBlock="dc_fire_coral_block",e.HornCoral="dc_horn_coral",e.HornCoralBlock="dc_horn_coral_block",e.TubeCoral="dc_tube_coral",e.TubeCoralBlock="dc_tube_coral_block",e.DarkOakLeaves="dc_dark_oak_leaves",e.DarkOakLog="dc_dark_oak_log",e.DarkOakPlanks="dc_dark_oak_planks",e.AcaciaLeaves="dc_acacia_leaves",e.AcaciaLog="dc_acacia_log",e.AcaciaPlanks="dc_acacia_planks",e.BirchLeaves="dc_birch_leaves",e.BirchLog="dc_birch_log",e.BirchPlanks="dc_birch_planks",e.DarkPrismarine="dc_dark_prismarine",e.Prismarine="dc_prismarine",e.PrismarineBricks="dc_prismarine_bricks",e.Bedrock="dc_bedrock",e.Obsidian="dc_obsidan",e.SeaLantern="dc_sea_lantern"}(b||(b={}));const p={[b.Stone]:{id:b.Stone},[b.SeaLantern]:{id:b.SeaLantern},[b.Snow]:{id:b.Snow},[b.SeaGrass]:{id:b.SeaGrass},[b.GrassBlock]:{id:b.GrassBlock},[b.Grass]:{id:b.Grass},[b.Dirt]:{id:b.Dirt},[b.Sand]:{id:b.Sand},[b.Water]:{id:b.Water},[b.Gravel]:{id:b.Gravel},[b.Clay]:{id:b.Clay},[b.Ice]:{id:b.Ice},[b.Andesite]:{id:b.Andesite},[b.Granite]:{id:b.Granite},[b.CobbleStone]:{id:b.CobbleStone},[b.MossyCobbleStone]:{id:b.MossyCobbleStone},[b.GlowStone]:{id:b.GlowStone},[b.OakLog]:{id:b.OakLog},[b.OakPlanks]:{id:b.OakPlanks},[b.OakLeaves]:{id:b.OakLeaves},[b.SpruceLog]:{id:b.SpruceLog},[b.SpruceLeaves]:{id:b.SpruceLeaves},[b.SprucePlanks]:{id:b.SprucePlanks},[b.SmoothAndesite]:{id:b.SmoothAndesite},[b.SmoothGranite]:{id:b.SmoothGranite},[b.Glass]:{id:b.Glass},[b.Podzol]:{id:b.Podzol},[b.EmeraldOre]:{id:b.EmeraldOre},[b.GoldOre]:{id:b.GoldOre},[b.IronOre]:{id:b.IronOre},[b.LapisOre]:{id:b.LapisOre},[b.RedstoneOre]:{id:b.RedstoneOre},[b.CoalBlock]:{id:b.CoalBlock},[b.DiamondBlock]:{id:b.DiamondBlock},[b.GoldBlock]:{id:b.GoldBlock},[b.IronBlock]:{id:b.IronBlock},[b.Mycelium]:{id:b.Mycelium},[b.TallFern]:{id:b.TallFern},[b.TallGrass]:{id:b.TallGrass},[b.TallRose]:{id:b.TallRose},[b.PaeoniaFlower]:{id:b.PaeoniaFlower},[b.SyringaFlower]:{id:b.SyringaFlower},[b.BlueOrchidFlower]:{id:b.BlueOrchidFlower},[b.DandelionFlower]:{id:b.DandelionFlower},[b.OxeyeDaisyFlower]:{id:b.OxeyeDaisyFlower},[b.TulipFlower]:{id:b.TulipFlower},[b.WaterlilyFlower]:{id:b.WaterlilyFlower},[b.Vine]:{id:b.Vine},[b.Fern]:{id:b.Fern},[b.Reeds]:{id:b.Reeds},[b.Cactus]:{id:b.Cactus},[b.Kelp]:{id:b.Kelp},[b.BrainCoral]:{id:b.BrainCoral},[b.BrainCoralBlock]:{id:b.BrainCoralBlock},[b.BubbleCoral]:{id:b.BubbleCoral},[b.BubbleCoralBlock]:{id:b.BubbleCoralBlock},[b.DeadBrainCoralBlock]:{id:b.DeadBrainCoralBlock},[b.DeadBubbleCoralBlock]:{id:b.DeadBubbleCoralBlock},[b.DeadFireCoral]:{id:b.DeadFireCoral},[b.DeadFireCoralBlock]:{id:b.DeadFireCoralBlock},[b.DeadHornCoral]:{id:b.DeadHornCoral},[b.DeadHornCoralBlock]:{id:b.DeadHornCoralBlock},[b.DeadTubeCoral]:{id:b.DeadTubeCoral},[b.DeadTubeCoralBlock]:{id:b.DeadTubeCoralBlock},[b.DeadBrainCoral]:{id:b.DeadBrainCoral},[b.DeadBubbleCoral]:{id:b.DeadBubbleCoral},[b.FireCoral]:{id:b.FireCoral},[b.FireCoralBlock]:{id:b.FireCoralBlock},[b.HornCoral]:{id:b.HornCoral},[b.HornCoralBlock]:{id:b.HornCoralBlock},[b.TubeCoral]:{id:b.TubeCoral},[b.TubeCoralBlock]:{id:b.TubeCoralBlock},[b.DarkOakLeaves]:{id:b.DarkOakLeaves},[b.DarkOakLog]:{id:b.DarkOakLog},[b.DarkOakPlanks]:{id:b.DarkOakPlanks},[b.AcaciaLeaves]:{id:b.AcaciaLeaves},[b.AcaciaLog]:{id:b.AcaciaLog},[b.AcaciaPlanks]:{id:b.AcaciaPlanks},[b.BirchLeaves]:{id:b.BirchLeaves},[b.BirchLog]:{id:b.BirchLog},[b.BirchPlanks]:{id:b.BirchPlanks},[b.DarkPrismarine]:{id:b.DarkPrismarine},[b.Prismarine]:{id:b.Prismarine},[b.PrismarineBricks]:{id:b.PrismarineBricks},[b.Bedrock]:{id:b.Bedrock},[b.Obsidian]:{id:b.Obsidian}};var C=r(95027);new Map;const v=new Map,f=new Map,y=new Map,S=new Map;function B(e,t,r){return`${e}-${t}-${r}`}class x{nodes;data;biomeTypes=new Map;constructor(e,t){this.nodes=e,this.data=t}init(){for(const[e,t]of this.data.biomeTypes){const r=new(h.getBiomeType(e))(this.nodes,this,t);this.biomeTypes.set(e,r),r.init()}}isInRange(e,t){return t.temperature[0]<=e[0]&&t.temperature[1]>=e[0]&&t.moisture[0]<=e[1]&&t.moisture[1]>=e[1]&&t.elevation[0]<=e[2]&&t.elevation[1]>=e[2]}getBiomeTypeInRange(e){let t=0,r=null,s=0,a=0;for(const[i,o]of this.data.biomeTypes){let n=c(e,o);if(n>a&&o.river[1]<=0&&o.excludeRiver&&(a=n),n>t){if(o.river[1]>=0&&s>0&&t==a){n=0;continue}t=n,r=this.biomeTypes.get(i),s=o.excludeRiver?100:s}}return r||this.biomeTypes.get("grass-land")}getBiomeTypeFromValue(e){let t=this.getBiomeTypeInRange(e);const r=t.getData();if(!r.edgeBiomeTypes.length||!r.edgeFactor)return t;{const s=[e[0]+r.edgeFactor[0],e[1]+r.edgeFactor[1],e[2]+r.edgeFactor[2],e[3]+r.edgeFactor[3]],a=this.getBiomeTypeInRange(s);if(a!=t){const r=this.getEdgeBiomeTypeFromValue(t,e);if(a.getData().edgeBiomeTypes.find((e=>e[0]==r.getData().id)))return r}}{const s=[e[0]-r.edgeFactor[0],e[1]-r.edgeFactor[1],e[2]-r.edgeFactor[2],e[3]-r.edgeFactor[3]],a=this.getBiomeTypeInRange(s);if(a!=t){const r=this.getEdgeBiomeTypeFromValue(t,e);if(a.getData().edgeBiomeTypes.find((e=>e[0]==r.getData().id)))return r}}return t}getBiomeFromValue(e,t){return this.getBiomeTypeFromValue(e).getBiomeFromValue(e,t)}getEdgeBiomeTypeFromValue(e,t){for(const[r,s]of e.getData().edgeBiomeTypes)if(this.isInRange(t,s))return this.biomeTypes.get(r);throw new Error("No biome type")}_clearTimeOut;getRiverNoise(e,t,r){let s=this.nodes.noise.biomeTypeRiverNoise(e/1600,1.2*r/1600),a=.05*this.nodes.noise.biomeDetailNoise(e/50,10,r/50)+.1;return s>-a&&s<a?(s+a)/(2*a):0}getElavation(e,t,r){const s=2**32;let a=.1*this.nodes.noise.biomeDetailNoise(e/100,50,r/100);const i=this.nodes.noise.biomeTypeElevationNoise((e-s)/1024,(r+s)/1024);let o=i+a;return(o>1||o<-1)&&(a=-a,o=i+a),Math.max(-1,Math.min(1,o))}getTempature(e,t,r){const s=2**32;let a=.1*this.nodes.noise.biomeDetailNoise(e/100,5880,r/100);const i=this.nodes.noise.biomeTypeTemperatureNoise((e-s)/4096,(r-s)/4096);let o=i+a;return(o>1||o<-1)&&(a=-a,o=i+a),Math.max(-1,Math.min(1,o))}getMostiure(e,t,r){const s=2**32;let a=.1*this.nodes.noise.biomeDetailNoise(e/100,10980,r/100);const i=this.nodes.noise.biomeTypeMoistureNoise((e-s)/1024,(r-s)/1024);let o=i+a;return(o>1||o<-1)&&(a=-a,o=i+a),Math.max(-1,Math.min(1,o))}getBiomeTypeValue(e,t,r){const s=this.getMostiure(e,t,r);return[this.getElavation(e,t,r),s,this.getTempature(e,t,r),this.getRiverNoise(e,t,r)]}clearCache(){S.clear(),v.clear(),f.clear(),y.clear()}getBiomeType(e,t,r){const s=B(e,t,r);let a=S.get(s);if(a)return a;let i=this.getBiomeTypeValue(e,t,r);return a=this.getBiomeTypeFromValue(i),S.set(s,a),a}getBiome(e,t,r){const s=B(e,t,r);let a=v.get(s);return a||(a=this.getBiomeType(e,t,r).getBiome(e,t,r),v.set(s,a),a)}getHeight(e,t,r){const s=B(e,t,r);let a=y.get(s);return a||(a=Math.max(this.getBiome(e,t,r).getHeight(e,t,r),1),y.set(s,a),a)}getBlendedHeight(e,t,r){const s=B(e,t,r);let a=f.get(s);return a||(a=Math.max(this.getBiome(e,t,r).getBlendedHeight(e,t,r),1),f.set(s,a),a)}generateWorldColumn(e,t){const{brush:r}=this.nodes,s=r.dataCursor;for(let a=e;a<this.nodes.chunkWidth+e;a++)for(let e=t;e<this.nodes.chunkDepth+t;e++){const t=this.getBiome(a,0,e),i=this.getBlendedHeight(a,0,e);if(i>C.k.world.bounds.MaxY-20)continue;for(let s=0;s<=i;s++){if(0==s){r.setId(b.Bedrock).setXYZ(a,s,e).paint();continue}if(t.getCarved(a,s,e))continue;const i=t.getGenVoxel(a,s,e);i&&r.setData(i).setXYZ(a,s,e).paint()}let o=!1,n=!1;for(let r=i+10;r>=0&&(o||(s.getVoxel(a,r,e)?.isRenderable()||1==r)&&(o=!0,t.fill(a,r+1,e)),n||t.addTopLayer(a,r,e)&&(n=!0),!o||!n);r--);}}decorateWorldColumn(e,t){const{brush:r}=this.nodes;for(let r=e;r<this.nodes.chunkWidth+e;r++)for(let e=t;e<this.nodes.chunkDepth+t;e++){const t=this.getBiome(r,0,e),s=this.getBlendedHeight(r,0,e);for(let a=1;a<=s;a++)t.decorate(r,a,e)}}wormCanver;generateBiomeTypeImage([e,t,r],[s,a,i]){this.wormCanver=new m(this.nodes);const o=new Uint8ClampedArray(4194304);console.log("Start");for(let t=r;t<=i;t++)for(let a=e;a<=s;a++){const s=4*(1024*(t-r)+(a-e));try{const[e,r,i]=this.getBiome(a,0,t).getData().color;o[s]=e,o[s+1]=r,o[s+2]=i,o[s+3]=255}catch(e){o[s]=255,o[s+3]=255}}return console.log("done",o),o}}class w{nodes;dimesnion;range;biomes=new Map;isRiver;constructor(e,t,r){this.nodes=e,this.dimesnion=t,this.range=r}getBiomeFromValue(e,t){e[4]=t;let r=0,s=null,a=null;for(const[t,i]of this.getData().biomes){let o=c(e,i);o>r&&(r=o,a=i,s=this.biomes.get(t))}if(!s||!a)return this.biomes.get(this.biomes.keys().next().value);const i=s.getData();if(!i.edgeBiomes.length||!i.edgeFactor)return s;{const r=[e[0]-(Array.isArray(i.edgeFactor[0])?i.edgeFactor[0][0]:i.edgeFactor[0]),e[1]-(Array.isArray(i.edgeFactor[1])?i.edgeFactor[1][0]:i.edgeFactor[1]),e[2]-(Array.isArray(i.edgeFactor[2])?i.edgeFactor[2][0]:i.edgeFactor[2]),e[3]-(Array.isArray(i.edgeFactor[3])?i.edgeFactor[3][0]:i.edgeFactor[3])],o=this.dimesnion.getBiomeTypeFromValue(r);if((a.excludeRiver||this.range.excludeRiver)&&o.isRiver)return s;if(o!=this)return this.getEdgeBiomeFromValue(e,s,t)}{const r=[e[0]+(Array.isArray(i.edgeFactor[0])?i.edgeFactor[0][1]:i.edgeFactor[0]),e[1]+(Array.isArray(i.edgeFactor[1])?i.edgeFactor[1][1]:i.edgeFactor[1]),e[2]+(Array.isArray(i.edgeFactor[2])?i.edgeFactor[2][1]:i.edgeFactor[2]),e[3]+(Array.isArray(i.edgeFactor[3])?i.edgeFactor[3][1]:i.edgeFactor[3])],o=this.dimesnion.getBiomeTypeFromValue(r);if((a.excludeRiver||this.range.excludeRiver)&&o.isRiver)return s;if(o!=this)return this.getEdgeBiomeFromValue(e,s,t)}return s}getEdgeBiomeFromValue(e,t,r){e[4]=r;let s=0,a=null,i=null;for(const[r,o]of t.getData().edgeBiomes){let t=c(e,o);t>s&&(s=t,i=o,a=this.biomes.get(r))}return a&&i?a:this.biomes.get(this.biomes.keys().next().value)}getBiomeValue(e,t,r){return this.nodes.noise.biomeNoise(e/120,0,r/120)}getBiome(e,t,r){const s=this.getBiomeValue(e,t,r),a=this.dimesnion.getBiomeTypeValue(e,t,r);return this.getBiomeFromValue(a,s)}init(){for(const[e]of this.getData().biomes){const t=h.getBiome(e);if(this.biomes.set(e,new t(this.nodes,this)),t.data.edgeBiomes.length)for(const[e]of t.data.edgeBiomes){const t=h.getBiome(e);this.biomes.set(e,new t(this.nodes,this))}}}}class D{nodes;biomeType;isRiver;constructor(e,t){this.nodes=e,this.biomeType=t}findHeightInDirection(e,t,r,s,a,i){let o=e,n=1;for(let e=1;e<=i;e++){const i=t+e*s,d=r+e*a,l=this.biomeType.dimesnion.getBiome(i,0,d);l!==this&&(o+=l.getHeight(i,0,d),n++)}return o/n}getBlendedHeight(e,t,r){const s=this.getData();if(s.heightBlendFactor<=0)return this.getHeight(e,t,r);const a=32*s.heightBlendFactor;let i=Math.round(this.getHeight(e,t,r)),o=i,n=1;o+=this.findHeightInDirection(i,e,r,0,1,a),o+=this.findHeightInDirection(i,e,r,0,-1,a),o+=this.findHeightInDirection(i,e,r,1,0,a),o+=this.findHeightInDirection(i,e,r,-1,0,a),n+=4,o+=this.findHeightInDirection(i,e,r,1,1,a),o+=this.findHeightInDirection(i,e,r,1,-1,a),o+=this.findHeightInDirection(i,e,r,-1,1,a),o+=this.findHeightInDirection(i,e,r,-1,-1,a),n+=4;const d=Math.round(o/9),l=this.getData().minHeight;return void 0!==l&&d<l?l:d}}class k{data;currentState;rules;angle=25;constructor(e){this.data=e}setRules(e,t,r=this.angle){this.currentState=e,this.rules=t,this.angle=r}setAngle(e){this.angle=e}generateRandomRules(){const e=["F[+F]F[-F]FE","F[&F]F[^F]FE","F[&+F]F[^-F]FE","F[-F][+F]FE","F[&-F][^+F]FE"],t=["FF","FFF","F-F"],r=2+Math.floor(2*Math.random());this.rules=[];for(let s=0;s<r;s++){const r=Math.random()<.5?e.map((e=>e.replace(/F/g,t[Math.floor(Math.random()*t.length)]+(Math.random()>.9?"E":"")))):t.map((e=>e+(Math.random()>.9?"E":"")));this.rules.push({symbol:"F",replacements:r})}return this.rules.push({symbol:"X",replacements:["F[-F][+F]F[&F]^FE","F&[X-FX]+FE","F^F[X]+F-FE"].slice(0,1+Math.floor(2*Math.random()))}),this.currentState="X",this.setRules("X",this.rules,this.angle),this}generateState(e){if(!this.rules.length)throw new Error("Rules not set. Please set rules before generating L-system.");for(let t=0;t<e;t++){let e="";for(const t of this.currentState){let r=!1;for(const s of this.rules)if(t===s.symbol){e+=s.replacements[Math.floor(Math.random()*s.replacements.length)],r=!0;break}r||(e+=t)}this.currentState=e}return this.currentState}interpret(e,t={x:0,y:0,z:0},r={x:0,y:1,z:0}){let s=[],a=t,i=r;for(const t of e)switch(t){case"F":a.x+=i.x,a.y+=i.y,a.z+=i.z,this.placeVoxel(a.x,a.y,a.z);break;case"E":this.placeEnd(a.x,a.y,a.z);case"+":i=this.rotate(i,this.angle,"z");break;case"-":i=this.rotate(i,-this.angle,"z");break;case"&":i=this.rotate(i,this.angle,"x");break;case"^":i=this.rotate(i,-this.angle,"x");break;case"[":s.push({position:{...a},direction:{...i}});break;case"]":const e=s.pop();a=e.position,i=e.direction}}rotate(e,t,r){const s=t*Math.PI/180;let a=e.x,i=e.y,o=e.z;switch(r){case"x":i=e.y*Math.cos(s)-e.z*Math.sin(s),o=e.y*Math.sin(s)+e.z*Math.cos(s);break;case"y":a=e.x*Math.cos(s)-e.z*Math.sin(s),o=e.x*Math.sin(s)+e.z*Math.cos(s);break;case"z":a=e.x*Math.cos(s)-e.y*Math.sin(s),i=e.x*Math.sin(s)+e.y*Math.cos(s)}return{x:a,y:i,z:o}}placeEnd(e,t,r){this.data.placeEnd(Math.round(e),Math.round(t),Math.round(r))}placeVoxel(e,t,r){this.data.placeVoxel(Math.round(e),Math.round(t),Math.round(r))}}var _=r(99638);function F(e,t,r,s,a,i,o=!1,n=!0){let d=r-i,l=a-i;e.setId(t);const c=e.dataCursor;for(let t=d;t<=r+i;t++)for(let d=l;d<=a+i;d++)if(!o||t!=r||d!=a){if(n){const e=c.getVoxel(t,s,d);if(e){if(e.isAir()&&1==e.getLevelState())continue;if(e.isRenderable())continue}}(0,_.me)(t,r,d,a)<=i&&e.setXYZ(t,s,d).paint()}}function T(e,t,r,s,a,i,o=-1,n=!0){let d=r-i,l=s-i,c=a-i;e.setId(t);const h=e.dataCursor;for(let t=d;t<=r+i;t++)for(let d=c;d<=a+i;d++)for(let c=l;c<=s+i;c++){if(o>-1&&Math.random()<o)continue;const l=h.getVoxel(t,c,d);if(n&&l){if(l.isAir()&&1==l.getLevelState())continue;if(l.isRenderable())continue}(0,_.D7)(t,c,d,r,s,a)<=i&&e.setXYZ(t,c,d).paint()}}class V{static oakLSystem=new k({placeVoxel(e,t,r){V.nodes.brush.setXYZ(e,t,r).setId(b.OakLog).paint()},placeEnd(e,t,r){T(V.nodes.brush,b.OakLeaves,e,t,r,Math.max(5*Math.random(),4),.01)}});static birchSystem=new k({placeVoxel(e,t,r){V.nodes.brush.setXYZ(e,t,r).setId(b.BirchLog).paint()},placeEnd(e,t,r){T(V.nodes.brush,b.BirchLeaves,e,t,r,Math.max(5*Math.random(),4),.01)}});static acaciSystem=new k({placeVoxel(e,t,r){V.nodes.brush.setXYZ(e,t,r).setId(b.AcaciaLog).paint()},placeEnd(e,t,r){T(V.nodes.brush,b.AcaciaLeaves,e,t,r,Math.max(5*Math.random(),4),.01)}});static darkOakSystem=new k({placeVoxel(e,t,r){V.nodes.brush.setXYZ(e,t,r).setId(b.DarkOakLog).paint()},placeEnd(e,t,r){T(V.nodes.brush,b.DarkOakLeaves,e,t,r,Math.max(5*Math.random(),4),.01)}});static nodes;static init(e){this.nodes=e}static generateOakTree(e,t,r){this.oakLSystem.generateRandomRules();const s=this.oakLSystem.generateState(2);this.oakLSystem.interpret(s,{x:e,y:t-1,z:r})}static generateDarkOakTree(e,t,r){this.darkOakSystem.generateRandomRules();const s=this.darkOakSystem.generateState(2);this.darkOakSystem.interpret(s,{x:e,y:t-1,z:r})}static generateAcaciaTree(e,t,r){this.acaciSystem.generateRandomRules();const s=this.acaciSystem.generateState(2);this.acaciSystem.interpret(s,{x:e,y:t-1,z:r})}static generateBirchTree(e,t,r){this.birchSystem.generateRandomRules();const s=this.birchSystem.generateState(2);this.birchSystem.interpret(s,{x:e,y:t-1,z:r})}static generateSpruceTree(e,t,r){const{brush:s}=this.nodes;s.setId(b.SpruceLog).setXYZ(e,t,r).paint();let a=Math.floor(30*Math.random()+10);s.setId(b.SpruceLeaves).setXYZ(e,a+t+1,r).paint(),s.setXYZ(e+1,a+t+1,r).paint(),s.setXYZ(e,a+t+1,r+1).paint(),s.setXYZ(e+1,a+t+1,r+1).paint();let i=4,o=a,n=o/4;for(;o>n&&i<10;)F(s,b.SpruceLeaves,e,t+o,r,i),o-=3,i++;for(let i=t;i<=t+a;i++)s.setId(b.SpruceLog).setXYZ(e,i,r).paint(),s.setXYZ(e+1,i,r).paint(),s.setXYZ(e,i,r+1).paint(),s.setXYZ(e+1,i,r+1).paint()}}var H=r(75184);const G=[[b.TulipFlower,10],[b.PaeoniaFlower,10],[b.SyringaFlower,10],[b.DandelionFlower,10],[b.BlueOrchidFlower,10],[b.OxeyeDaisyFlower,10],[b.WaterlilyFlower,10]],L=[[b.Fern,10],[b.Grass,10],[b.TallGrass,10],[b.TallFern,10]],M=[[b.DeadFireCoral,10],[b.DeadHornCoral,10],[b.DeadTubeCoral,10],[b.DeadBrainCoral,10],[b.DeadBubbleCoral,10]],R=[[b.FireCoral,10],[b.HornCoral,10],[b.TubeCoral,10],[b.BrainCoral,10],[b.BubbleCoral,10]],I=[[b.SeaGrass,10]];class N{static generateCactus(e,t,r,s){const{brush:a}=e;let i=Math.floor(5*Math.random()+2);for(let e=r;e<=r+i;e++)a.setId(b.Cactus).setXYZ(t,e,s).paint()}static generateReed(e,t,r,s){const{brush:a}=e;let i=Math.floor(5*Math.random()+2);for(let e=r;e<=r+i;e++)a.setId(b.Reeds).setXYZ(t,e,s).paint()}static generateKelp(e,t,r,s){const{brush:a}=e;let i=Math.floor(15*Math.random()+5),o=Math.floor(5*Math.random());for(let n=r;n<=r+i&&n<e.waterHeight-o;n++)a.setId(b.Water).setLevel(7).setSecondaryId(b.Kelp).setXYZ(t,n,s).paint();a.setLevel(0),a.setSecondaryId("")}static generateWaterPlant(e,t,r,s){const{brush:a}=e,i=H.t.getValue(I);a.setId(b.Water).setLevel(7).setSecondaryId(i).setXYZ(t,r,s).paint(),a.setLevel(0),a.setSecondaryId("")}static generateRandomFlower(e,t,r,s){const{brush:a}=e,i=H.t.getValue(G);a.setId(i).setXYZ(t,r,s).paint()}static generateRandomPlant(e,t,r,s){const{brush:a}=e,i=H.t.getValue(L);a.setId(i).setXYZ(t,r,s).paint()}static generateRandomDeadCoral(e,t,r,s){const{brush:a}=e,i=H.t.getValue(M);a.setId(i).setXYZ(t,r,s).paint()}static generateRandomCoral(e,t,r,s){const{brush:a}=e,i=H.t.getValue(R);a.setId(b.Water).setLevel(7).setSecondaryId(i).setXYZ(t,r,s).paint(),a.setLevel(0),a.setSecondaryId("")}}const X=2**32;class Y extends g{static data={id:"standard"};getCarved(e,t,r){const s=this.nodes.noise.worldGenNoise(e/50,t/50,r/50),a=(1+this.nodes.noise.detailNoise((e-X)/100,t/100,(r-X)/100))/2;return a<.4+(.6-.4)*s-.9*a&&t<(.2+(.8-.2)*s+.9*a)*this.nodes.worldHeight}getData(){return Y.data}getClass(){return Y}}const Z=2**32;class A extends g{static data={id:"worm"};getCarved(e,t,r){for(let s=0;s<4;s++){let a=150/(s%3);e+=2e4*s,r-=2e4*s;let i=this.nodes.noise.detailNoise(e/200,25e4*s,r/200);if(this.nodes.noise.worldDetailNoise(e/600,25e4*s,r/600)<.5)continue;let o=(1+this.nodes.noise.worldDetailNoise((e-Z)/a,5e4,(r-Z)/a))/2*60+5,n=(1+this.nodes.noise.worldDetailNoise((e-Z)/150,25e4,(r-Z)/150))/2*10+5,d=(1+this.nodes.noise.worldDetailNoise((e-Z)/30,(t+200)/30,(r-Z)/30))/2;if(i>-.03-.02*d&&i<.03+.02*d&&t<=o+(n+20*d)/2&&t>=o-(n+20*d)/2)return!0}return!1}getData(){return A.data}getClass(){return A}}class O{static standard;static worm;static valley;static init(e){this.standard=new Y(e),this.worm=new A(e),this.valley=new m(e)}static getCarved(e,t,r){const s=this.standard.getCarved(e,t,r),a=this.worm.getCarved(e,t,r);return s||a}}const[E,P]=[1e3,1e4];class z extends D{static data={id:"tundra",heightBlendFactor:1,color:[3,171,121],edgeBiomes:[]};getGenVoxel(e,t,r){return!(t>40*this.noiseQuery(e,t,r)+this.nodes.minHeight)&&p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+E)/100,t/100,(r+P)/100))/2}getHeight(e,t,r){return 40*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.GrassBlock]).setXYZ(e,t,r).paint(),s.setData(p[b.Snow]).setXYZ(e,t+1,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();s>.999&&V.generateOakTree(e,t+1,r),s>.88&&s<.89&&N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return z}}const[W,Q]=[1e3,1e4];class $ extends D{static data={id:"frozen-waste",heightBlendFactor:1,color:[255,255,255],edgeBiomes:[]};getGenVoxel(e,t,r){return!(t>40*this.noiseQuery(e,t,r)+this.nodes.minHeight)&&p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+W)/100,t/100,(r+Q)/100))/2}getHeight(e,t,r){return 40*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Gravel]).setXYZ(e,t,r).paint(),s.setData(p[b.Snow]).setXYZ(e,t+1,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){}getData(){return this.getClass().data}getClass(){return $}}class q extends w{static data={id:"artic",color:[255,255,255],biomes:[[z.data.id,o([-.8,-.5])],[$.data.id,o([-1,-.8])]],edgeBiomeTypes:[]};getData(){return this.getClass().data}getClass(){return q}}const[K,j]=[1e3,1e4];class J extends D{static data={id:"desert",heightBlendFactor:1,color:[166,132,40],edgeBiomes:[]};getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+K)/480,t/480,(r+j)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Sand]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Sand]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.Sand){const s=Math.random();if(s>.999)return void V.generateOakTree(e,t+1,r);if(s>.88&&s<.89)return void N.generateCactus(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return J}}class U{static brainCoralSystem=new k({placeVoxel(e,t,r){t>U.nodes.waterHeight-1||U.nodes.brush.setXYZ(e,t,r).setId(b.BrainCoralBlock).paint()},placeEnd(e,t,r){}});static fireCoralSystem=new k({placeVoxel(e,t,r){t>U.nodes.waterHeight-1||U.nodes.brush.setXYZ(e,t,r).setId(b.FireCoralBlock).paint()},placeEnd(e,t,r){}});static bubbleCoralSystem=new k({placeVoxel(e,t,r){t>U.nodes.waterHeight-1||U.nodes.brush.setXYZ(e,t,r).setId(b.BubbleCoralBlock).paint()},placeEnd(e,t,r){}});static hornCoralSystem=new k({placeVoxel(e,t,r){t>U.nodes.waterHeight-1||U.nodes.brush.setXYZ(e,t,r).setId(b.HornCoralBlock).paint()},placeEnd(e,t,r){}});static tubeCoralSystem=new k({placeVoxel(e,t,r){t>U.nodes.waterHeight-1||U.nodes.brush.setXYZ(e,t,r).setId(b.TubeCoralBlock).paint()},placeEnd(e,t,r){}});static nodes;static init(e){this.nodes=e}static generateBrainCoral(e,t,r){this.brainCoralSystem.generateRandomRules();const s=this.brainCoralSystem.generateState(2);this.brainCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateFireCoral(e,t,r){this.fireCoralSystem.generateRandomRules();const s=this.fireCoralSystem.generateState(2);this.fireCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateBubbleCoral(e,t,r){this.bubbleCoralSystem.generateRandomRules();const s=this.bubbleCoralSystem.generateState(2);this.bubbleCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateHornCoral(e,t,r){this.hornCoralSystem.generateRandomRules();const s=this.hornCoralSystem.generateState(2);this.hornCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateTubeCoral(e,t,r){this.tubeCoralSystem.generateRandomRules();const s=this.tubeCoralSystem.generateState(2);this.tubeCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static deadBrainCoralSystem=new k({placeVoxel(e,t,r){U.nodes.brush.setXYZ(e,t,r).setId(b.DeadBrainCoralBlock).paint()},placeEnd(e,t,r){}});static deadBubbleCoralSystem=new k({placeVoxel(e,t,r){U.nodes.brush.setXYZ(e,t,r).setId(b.DeadBubbleCoralBlock).paint()},placeEnd(e,t,r){}});static deadFireCoralSystem=new k({placeVoxel(e,t,r){U.nodes.brush.setXYZ(e,t,r).setId(b.DeadFireCoralBlock).paint()},placeEnd(e,t,r){}});static deadHornCoralSystem=new k({placeVoxel(e,t,r){U.nodes.brush.setXYZ(e,t,r).setId(b.DeadHornCoralBlock).paint()},placeEnd(e,t,r){}});static deadTubeCoralSystem=new k({placeVoxel(e,t,r){U.nodes.brush.setXYZ(e,t,r).setId(b.DeadTubeCoralBlock).paint()},placeEnd(e,t,r){}});static generateDeadBrainCoral(e,t,r){this.deadBrainCoralSystem.generateRandomRules();const s=this.deadBrainCoralSystem.generateState(2);this.deadBrainCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateDeadBubbleCoral(e,t,r){this.deadBubbleCoralSystem.generateRandomRules();const s=this.deadBubbleCoralSystem.generateState(2);this.deadBubbleCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateDeadFireCoral(e,t,r){this.deadFireCoralSystem.generateRandomRules();const s=this.deadFireCoralSystem.generateState(2);this.deadFireCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateDeadHornCoral(e,t,r){this.deadHornCoralSystem.generateRandomRules();const s=this.deadHornCoralSystem.generateState(2);this.deadHornCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static generateDeadTubeCoral(e,t,r){this.deadTubeCoralSystem.generateRandomRules();const s=this.deadTubeCoralSystem.generateState(2);this.deadTubeCoralSystem.interpret(s,{x:e,y:t-1,z:r})}static runRandomGenerator(e){return e[Math.floor(Math.random()*e.length)]}static liveGens=[this.generateBrainCoral,this.generateBubbleCoral,this.generateFireCoral,this.generateHornCoral,this.generateTubeCoral];static generateRandomCoral(e,t,r){this.runRandomGenerator(this.liveGens).call(this,e,t,r)}static deadGens=[this.generateDeadBrainCoral,this.generateDeadBubbleCoral,this.generateDeadFireCoral,this.generateDeadHornCoral,this.generateDeadTubeCoral];static generateRandomDeadCoral(e,t,r){this.runRandomGenerator(this.deadGens).call(this,e,t,r)}}const[ee,te]=[1e3,1e4];class re extends D{static data={id:"dea-sea",heightBlendFactor:1,color:[153,131,70],edgeBiomes:[]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+ee)/480,t/480,(r+te)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Sand]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Sand]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.Sand){const s=Math.random();if(s>.87&&s<.89)return void U.generateRandomDeadCoral(e,t+1,r);if(s>.85&&s<.87)return void N.generateRandomDeadCoral(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return re}}class se extends w{static data={id:"desert",color:[166,132,40],biomes:[[J.data.id,o([-1,1],[-1,1],[.3,.7],[-1,1])],[re.data.id,o([-1,1],[-1,1],[0,.2],[-1,1])]],edgeBiomeTypes:[]};getData(){return this.getClass().data}getClass(){return se}}const[ae,ie]=[1e3,1e4];class oe extends D{static data={id:"oak-forest",heightBlendFactor:1,color:[42,102,49],edgeBiomes:[]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+ae)/480,t/480,(r+ie)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.GrassBlock]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.97)return void V.generateOakTree(e,t+1,r);if(s>.85&&s<.89)return void N.generateRandomFlower(this.nodes,e,t+1,r);if(s>0&&s<.1)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return oe}}const[ne,de]=[1e3,1e4];class le extends D{static data={id:"spruce-forest",heightBlendFactor:1,color:[32,56,35],edgeBiomes:[]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+ne)/480,t/480,(r+de)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}getFillVoxel(e,t,r,s=!1){const a=(1+this.nodes.noise.worldGenNoise(e/200,t/200,r/200))/2;return a>.4&&a<1?b.Podzol:a>.3&&a<.4?s?b.GrassBlock:b.Dirt:b.Gravel}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[this.getFillVoxel(e,t,r,!0)]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[this.getFillVoxel(e,t,r)]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&(i==b.Podzol||i==b.GrassBlock)){const s=Math.random();if(s>.99)return void V.generateSpruceTree(e,t+1,r);if(s>.88&&s<.89)return void N.generateRandomFlower(this.nodes,e,t+1,r);if(s>0&&s<.05)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return le}}const[ce,he]=[1e3,1e4];class ge extends D{static data={id:"dark-oak-forest",heightBlendFactor:1,color:[1,66,8],edgeBiomes:[]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+ce)/480,t/480,(r+he)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.GrassBlock]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.97)return void V.generateDarkOakTree(e,t+1,r);if(s>.85&&s<.89)return void N.generateRandomFlower(this.nodes,e,t+1,r);if(s>0&&s<.1)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return ge}}class ue extends D{static data={id:"birch-forest",heightBlendFactor:1,color:[95,204,61],edgeBiomes:[]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){const[s,a]=[1e3,1e4];return(1+this.nodes.noise.worldGenNoise((e+s)/480,t/480,(r+a)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.GrassBlock]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.97)return void V.generateBirchTree(e,t+1,r);if(s>.85&&s<.89)return void N.generateRandomFlower(this.nodes,e,t+1,r);if(s>0&&s<.1)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return ue}}class me extends w{static data={id:"forest",color:[19,77,17],biomes:[[oe.data.id,o([-.2,.3],[-.2,-.01],[.1,.8])],[le.data.id,o([-.8,-.1],[-.4,-.2],[.2,.8])],[ge.data.id,o([-.2,.3],[-.4,-.3],[.2,.5])],[ue.data.id,o([-.3,.4],[-.3,-.1],[.4,.8])]],edgeBiomeTypes:[]};getData(){return this.getClass().data}getClass(){return me}}const[be,pe]=[1e3,1e4];class Ce extends D{static data={id:"prairie",heightBlendFactor:1,color:[117,255,112],edgeBiomes:[]};caveCarver=new Y(this.nodes);getCoreVoxel(e,t,r){const s=(1+this.nodes.noise.worldGenNoise(e/200,t/200,r/200))/2;return s>=.8?b.Granite:s>=.7&&s<.8?b.Andesite:b.Stone}getGenVoxel(e,t,r){return p[this.getCoreVoxel(e,t,r)]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+be)/480,t/480,(r+pe)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone||o==b.Andesite||o==b.Granite){s.setData(p[b.GrassBlock]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.99)return void V.generateOakTree(e,t+1,r);if(s>.9&&s<.92)return void N.generateRandomFlower(this.nodes,e,t+1,r);if(s>0&&s<.1)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return Ce}}const[ve,fe]=[1e3,1e4];class ye extends D{static data={id:"savannah",heightBlendFactor:1,color:[188,255,112],edgeBiomes:[]};caveCarver=new Y(this.nodes);getCoreVoxel(e,t,r){const s=(1+this.nodes.noise.worldGenNoise(e/200,t/200,r/200))/2;return s>=.8?b.Granite:s>=.7&&s<.8?b.Andesite:b.Stone}getGenVoxel(e,t,r){return p[this.getCoreVoxel(e,t,r)]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+ve)/480,t/480,(r+fe)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone||o==b.Andesite||o==b.Granite){s.setData(p[b.GrassBlock]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.99)return void V.generateAcaciaTree(e,t+1,r);if(s>0&&s<.01)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return ye}}class Se extends w{static data={id:"grass-land",color:[117,255,112],biomes:[[Ce.data.id,o([.1,.3],[-.5,-.3])],[ye.data.id,o([.3,.4],[-.3,-.1])]],edgeBiomeTypes:[]};getData(){return this.getClass().data}getClass(){return Se}}const[Be,xe]=[1e3,1e4];class we extends D{static data={id:"rocky-mountain",heightBlendFactor:.2,color:[129,142,143],edgeBiomes:[]};caveCarver=new Y(this.nodes);getCoreVoxel(e,t,r){const s=(1+this.nodes.noise.worldGenNoise(e/40,t/40,r/40))/2;return s>.6&&s<.7?b.Gravel:b.Stone}getGenVoxel(e,t,r){return p[this.getCoreVoxel(e,t,r)]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+Be)/30,t/30,(r+xe)/30))/2}getHeight(e,t,r){return 200*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){if(t<150)return!0;const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Snow]).setXYZ(e,t,r).paint(),s.setData(p[b.Snow]).setXYZ(e,t+1,r).paint();let a=5;for(;a--;)s.setData(p[b.Snow]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){}getData(){return this.getClass().data}getClass(){return we}}const[De,ke]=[1e3,1e4];class _e extends D{static data={id:"high-gravel-hills",heightBlendFactor:1,color:[90,99,99],edgeBiomes:[]};caveCarver=new Y(this.nodes);getCoreVoxel(e,t,r){const s=(1+this.nodes.noise.worldGenNoise(e/40,t/40,r/40))/2;return s>.2&&s<.8?b.Gravel:b.Stone}getGenVoxel(e,t,r){return p[this.getCoreVoxel(e,t,r)]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.getHeight(e,t,r)}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+De)/100,t/100,(r+ke)/100))/2}getHeight(e,t,r){return 80*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){if(t<150)return!0;const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Snow]).setXYZ(e,t,r).paint(),s.setData(p[b.Snow]).setXYZ(e,t+1,r).paint();let a=5;for(;a--;)s.setData(p[b.Snow]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){return!1}decorate(e,t,r){}getData(){return this.getClass().data}getClass(){return _e}}class Fe extends w{static data={id:"mountain",color:[129,142,143],biomes:[[we.data.id,o(void 0,void 0,[.85,1])],[_e.data.id,o(void 0,void 0,[.7,.85])]],edgeBiomeTypes:[]};getData(){return this.getClass().data}getClass(){return Fe}}const[Te,Ve]=[1e3,1e4];class He extends D{static data={id:"beache",heightBlendFactor:.5,color:[252,252,3],edgeBiomes:[],minHeight:60};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+Te)/480,t/480,(r+Ve)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Sand]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Sand]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(;a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setId(b.Sand).setXYZ(e,a,r).paint(),a++}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.999)return void V.generateOakTree(e,t+1,r);if(s>.85&&s<.89)return void N.generateRandomPlant(this.nodes,e,t+1,r)}if(a&&i==b.Sand){const s=Math.random();if(s>.88&&s<.89)return void N.generateRandomPlant(this.nodes,e,t+1,r);if(s>2e-4&&s<.005)return void N.generateReed(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return He}}const[Ge,Le]=[1e3,1e4];class Me extends D{static data={id:"rocky-beach",heightBlendFactor:.5,color:[122,122,59],edgeBiomes:[],minHeight:60};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getFillVoxel(e,t,r,s=!1){const a=(1+this.nodes.noise.worldGenNoise(e/200,t/200,r/200))/2;return a>.4&&a<1?b.Gravel:a>.3&&a<.4?b.Sand:b.Andesite}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+Ge)/480,t/480,(r+Le)/480))/2}getHeight(e,t,r){return 30*this.noiseQuery(e,0,r)+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[this.getFillVoxel(e,t,r)]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[this.getFillVoxel(e,t,r)]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(;a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setId(this.getFillVoxel(e,t,r)).setXYZ(e,a,r).paint(),a++}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.999)return void V.generateOakTree(e,t+1,r);if(s>.85&&s<.89)return void N.generateRandomPlant(this.nodes,e,t+1,r)}if(a&&i==b.Sand){const s=Math.random();if(s>.88&&s<.89)return void N.generateRandomPlant(this.nodes,e,t+1,r);if(s>2e-4&&s<.005)return void N.generateReed(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return Me}}const[Re,Ie]=[1e3,1e4];class Ne extends D{static data={id:"icy-beach",heightBlendFactor:.5,color:[230,230,85],edgeBiomes:[],minHeight:60};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getHeight(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+Re)/480,0,(r+Ie)/480))/2*5+this.nodes.minHeight}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setData(p[b.Sand]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Sand]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(;a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setId(b.Sand).setXYZ(e,a,r).paint(),a++}decorate(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();i&&o==b.Sand&&Math.random()<.95&&s.setId(b.Snow).setXYZ(e,t+1,r).paint()}getData(){return this.getClass().data}getClass(){return Ne}}const[Xe,Ye]=[1e3,1e4];class Ze extends D{static data={id:"shallow-ocean",heightBlendFactor:1,color:[0,119,128],edgeFactor:[0,[.1,0],0,0],edgeBiomes:[[He.data.id,o([0,1],void 0,[-1,.6])],[Me.data.id,o(void 0,void 0,[.6,1])],[Ne.data.id,o([-1,-.5],void 0,[-1,.6])]]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getHeight(e,t,r){return this.nodes.minHeight-(1+this.nodes.noise.worldGenNoise((e+Xe)/480,0,(r+Ye)/480))/2*40}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r),o=i?.isAir()||i?.isRenderable()&&this.nodes.substanceTool.setSubstance(a.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,n=a.getVoxel(e,t,r)?.getStringId();if(o&&n==b.Stone){s.setData(p[b.Dirt]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(s.setId(b.Water).setLevel(7);a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setXYZ(e,a,r).paint(),a++;s.setLevel(0)}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r),i=a?.isAir()||a?.isRenderable()&&this.nodes.substanceTool.setSubstance(s.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,o=s.getVoxel(e,t,r)?.getStringId();if(i&&(o==b.Dirt||o==b.Sand)){const s=Math.random();if(s>.87&&s<.89)return void N.generateKelp(this.nodes,e,t+1,r);if(s>.98)return void N.generateWaterPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return Ze}}const[Ae,Oe]=[1e3,1e4];class Ee extends D{static data={id:"tropical-ocean",heightBlendFactor:1,color:[10,231,247],edgeFactor:[0,[.1,0],0,0],edgeBiomes:[[He.data.id,o([0,1],void 0,[-1,.6])],[Me.data.id,o(void 0,void 0,[.6,1])],[Ne.data.id,o([-1,-.5],void 0,[-1,.6])]]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getHeight(e,t,r){return this.nodes.minHeight-(1+this.nodes.noise.worldGenNoise((e+Ae)/480,0,(r+Oe)/480))/2*40}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r),o=i?.isAir()||i?.isRenderable()&&this.nodes.substanceTool.setSubstance(a.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,n=a.getVoxel(e,t,r)?.getStringId();if(o&&n==b.Stone){s.setData(p[b.Dirt]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(s.setId(b.Water).setLevel(7);a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setXYZ(e,a,r).paint(),a++;s.setLevel(0)}decorate(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r),o=i?.isAir()||i?.isRenderable()&&this.nodes.substanceTool.setSubstance(a.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,n=a.getVoxel(e,t,r)?.getStringId();if(o&&(n==b.Dirt||n==b.Sand)){const a=Math.random();if(a>.87&&a<.89)return void U.generateRandomCoral(e,t+1,r);if(a>.85&&a<.87)return void N.generateRandomCoral(this.nodes,e,t+1,r);if(a>.8&&a<.82)return void s.setId(b.SeaLantern).setXYZ(e,t+1,r).paint();if(a>.98)return void N.generateWaterPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return Ee}}const[Pe,ze]=[1e3,1e4];class We extends D{static data={id:"deep-ocean",heightBlendFactor:1,color:[2,83,89],edgeFactor:[0,[.1,0],0,0],edgeBiomes:[[He.data.id,o([0,1],void 0,[-1,.6])],[Me.data.id,o(void 0,void 0,[.6,1])],[Ne.data.id,o([-1,-.5],void 0,[-1,.6])]]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getHeight(e,t,r){return this.nodes.minHeight-(1+this.nodes.noise.worldGenNoise((e+Pe)/480,0,(r+ze)/480))/2*50}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r),o=i?.isAir()||i?.isRenderable()&&this.nodes.substanceTool.setSubstance(a.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,n=a.getVoxel(e,t,r)?.getStringId();if(o&&n==b.Stone){s.setData(p[b.Dirt]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(s.setId(b.Water).setLevel(7);a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setXYZ(e,a,r).paint(),a++;s.setLevel(0)}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r),i=a?.isAir()||a?.isRenderable()&&this.nodes.substanceTool.setSubstance(s.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,o=s.getVoxel(e,t,r)?.getStringId();if(i&&(o==b.Dirt||o==b.Sand)){const s=Math.random();if(s>.87&&s<.89)return void N.generateKelp(this.nodes,e,t+1,r);if(s>.98)return void N.generateWaterPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return We}}const[Qe,$e]=[1e3,1e4];class qe extends D{static data={id:"frozen-ocean",heightBlendFactor:1,color:[57,99,102],edgeFactor:[0,[.1,0],0,0],edgeBiomes:[[He.data.id,o([0,1])],[Me.data.id,o(void 0,void 0,[.7,1])],[Ne.data.id,o([-1,-.5])]]};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getHeight(e,t,r){return this.nodes.minHeight-(1+this.nodes.noise.worldGenNoise((e+Qe)/480,0,(r+$e)/480))/2*40}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r),o=i?.isAir()||i?.isRenderable()&&this.nodes.substanceTool.setSubstance(a.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,n=a.getVoxel(e,t,r)?.getStringId();if(o&&n==b.Stone){s.setData(p[b.Dirt]).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setData(p[b.Dirt]).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;Math.random()>.8&&s.setId(b.Ice).setXYZ(e,this.nodes.waterHeight+1,r).paint(),s.setId(b.Ice).setXYZ(e,this.nodes.waterHeight,r).paint();let a=t;for(s.setId(b.Water).setLevel(7);a<=this.nodes.waterHeight-1;)t<this.nodes.waterHeight-1&&s.setXYZ(e,a,r).paint(),a++;s.setLevel(0)}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r),i=a?.isAir()||a?.isRenderable()&&this.nodes.substanceTool.setSubstance(s.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,o=s.getVoxel(e,t,r)?.getStringId();if(i&&(o==b.Dirt||o==b.Sand)){const s=Math.random();if(s>.87&&s<.89)return void N.generateKelp(this.nodes,e,t+1,r);if(s>.98)return void N.generateWaterPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return qe}}class Ke extends w{static data={id:"ocean",color:[2,83,89],biomes:[[Ze.data.id,o([-.2,.4],[0,1],[-.4,0])],[Ee.data.id,o([.8,1],[0,1],[-.1,0])],[We.data.id,o([-1,.4],[0,1],[-1,-.5])],[qe.data.id,o([-1,-.5],[0,1],[-.5,0])]],edgeBiomeTypes:[]};getData(){return this.getClass().data}getClass(){return Ke}}const[je,Je]=[1e3,1e4];class Ue extends D{static data={id:"river-bank",heightBlendFactor:.25,color:[43,26,1],edgeBiomes:[],minHeight:60};caveCarver=new Y(this.nodes);getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}noiseQuery(e,t,r){return(1+this.nodes.noise.worldGenNoise((e+je)/120,t/120,(r+Je)/120))/2}getHeight(e,t,r){return 5*this.noiseQuery(e,0,r)+(this.nodes.waterHeight+5)}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r)?.isAir()||!0,o=a.getVoxel(e,t,r)?.getStringId();if(i&&o==b.Stone){s.setId(this.getFillVoxel(e,t,r,!0)).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setId(this.getFillVoxel(e,t-1-a,r)).setXYZ(e,t-1-a,r).paint();return!0}return!1}getFillVoxel(e,t,r,s=!1){const a=(1+this.nodes.noise.worldGenNoise(e/20+10,t/20+100,r/20+10))/2;return a>.5&&a<1?b.Sand:a>.3&&a<.5?s?b.GrassBlock:b.Dirt:b.Gravel}fill(e,t,r){const s=this.nodes.brush,a=s.dataCursor;let i=t;for(;i<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&(a.getVoxel(e,t,r)?.isRenderable()||s.setId(this.getFillVoxel(e,i,r,i==this.nodes.waterHeight)).setXYZ(e,i,r).paint()),i++}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r)?.isAir()||!0,i=s.getVoxel(e,t,r)?.getStringId();if(a&&i==b.GrassBlock){const s=Math.random();if(s>.99)return void V.generateOakTree(e,t+1,r);if(s>.9&&s<.92)return void N.generateReed(this.nodes,e,t+1,r);if(s>0&&s<.1)return void N.generateRandomPlant(this.nodes,e,t+1,r)}}getData(){return this.getClass().data}getClass(){return Ue}}const[et,tt]=[1e3,1e4];class rt extends D{static data={id:"river",heightBlendFactor:.25,color:[3,206,252],edgeFactor:[0,0,0,[.1,.3]],edgeBiomes:[[Ue.data.id,o()]]};caveCarver=new Y(this.nodes);isRiver=!0;getGenVoxel(e,t,r){return p[b.Stone]}getCarved(e,t,r){return O.getCarved(e,t,r)}getBlendtoHeight(e,t,r){return this.nodes.waterHeight}getHeight(e,t,r){return this.nodes.waterHeight-5-(1+this.nodes.noise.worldGenNoise((e+et)/480,0,(r+tt)/480))/2*5}getLayerVoxel(e,t,r){const s=(1+this.nodes.noise.worldGenNoise(e/200,t/200,r/200))/2;return s>=.7?b.Gravel:s<.7&&s>.4?b.Dirt:s<=.4&&s>.2?b.Sand:b.Clay}addTopLayer(e,t,r){const s=this.nodes.brush,a=s.dataCursor,i=a.getVoxel(e,t+1,r),o=i?.isAir()||i?.isRenderable()&&this.nodes.substanceTool.setSubstance(a.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,n=a.getVoxel(e,t,r)?.getStringId();if(o&&n==b.Stone){s.setId(this.getLayerVoxel(e,t,r)).setXYZ(e,t,r).paint();let a=5;for(;a--;)s.setId(this.getLayerVoxel(e,t-1,r)).setXYZ(e,t-1-a,r).paint();return!0}return!1}fill(e,t,r){const{brush:s}=this.nodes;let a=t;for(s.setId(b.Water).setLevel(7);a<=this.nodes.waterHeight;)t<this.nodes.waterHeight&&s.setXYZ(e,a,r).paint(),a++;s.setLevel(0)}decorate(e,t,r){const s=this.nodes.brush.dataCursor,a=s.getVoxel(e,t+1,r),i=a?.isAir()||a?.isRenderable()&&this.nodes.substanceTool.setSubstance(s.getVoxel(e,t+1,r).getSubstance()).isLiquid()||!1,o=s.getVoxel(e,t,r)?.getStringId();i&&(o==b.Dirt||o==b.Sand)&&t<this.nodes.waterHeight-1&&Math.random()>.98&&N.generateWaterPlant(this.nodes,e,t+1,r)}getData(){return this.getClass().data}getClass(){return rt}}class st extends w{static data={id:"river",color:[0,228,245],biomes:[[rt.data.id,o()]],edgeBiomeTypes:[]};isRiver=!0;getData(){return this.getClass().data}getClass(){return st}}const at=-.35,it=.8,ot={id:"overworld",biomeTypes:[[se.data.id,o([.6,1],[-1,-.5],[at,it])],[q.data.id,o([-1,-.8],[-.7,0],[at,it])],[Ke.data.id,o([-1,.5],[.1,1],[-1,at],void 0,void 0,!1,!1,!1,!0,!1,!0)],[Se.data.id,o([-.2,.5],[-.5,-.2],[at,it])],[me.data.id,o([-.2,.3],[-.55,-.1],[at,it])],[Fe.data.id,o([-.4,.7],[-1,0],[it,1])],[st.data.id,o([-1,1],[-1,1],[at,it-.2],[.3,1.2],void 0,!1,!1,!1,!0)]]};var nt=r(29835),dt=r.n(nt),lt=r(84627);class ct{worldGenNoise;detailNoise;orePerlin;worldDetailNoise;worldGenDetailNoise;biomeNoise;biomeDetailNoise;biomeTypeMoistureNoise;biomeTypeTemperatureNoise;biomeTypeElevationNoise;biomeTypeRiverNoise;oreNoise;init(e){this.worldGenNoise=(0,lt.Cf)(dt()(`${e.worldNoise}`)),this.detailNoise=(0,lt.Cf)(dt()(`${e.detailNoise}`)),this.biomeNoise=(0,lt.fu)(dt()(`${e.biomeNoise}`)),this.biomeTypeMoistureNoise=(0,lt.fu)(dt()(`${e.biomeTypeMoistureNoise}`)),this.biomeTypeTemperatureNoise=(0,lt.fu)(dt()(`${e.biomeTypeTemperatureNoise}`)),this.biomeTypeElevationNoise=(0,lt.fu)(dt()(`${e.biomeTypeElevationNoise}`)),this.biomeDetailNoise=(0,lt.Cf)(dt()(`${e.biomeDetailNoise}`)),this.biomeTypeRiverNoise=(0,lt.fu)(dt()(e.biomeTypeRiverNoise)),this.oreNoise=(0,lt.Cf)(dt()(e.oreNoise)),this.worldDetailNoise=(0,lt.Cf)(dt()(e.worldDetailNoise)),this.worldGenDetailNoise=(0,lt.Cf)(dt()(e.worldGenDetailNoise)),console.log("noise",this.biomeTypeElevationNoise(123,31290),this.biomeTypeElevationNoise(239048230,42304),this.biomeTypeTemperatureNoise(209348,238490))}}var ht=r(25701),gt=r(15620);const ut=new a.T;let mt;class bt{static instance;nodes;overWorldGen;constructor(){if(bt.instance)return bt.instance;bt.instance=this}init(){h.registerBiomeTypes(Ke,q,me,Fe,se,Se,st),h.registerBiomes(z,J,re,ge,ue,$,_e,ye,oe,Ne,Me,we,le,Ce,we,Ze,He,We,qe,Ee,rt,Ue),h.registerCaveCarver(Y,A,m),s.J.setWorldGen(this);const e=new ct;this.nodes=new i,e.init({biomeNoise:8394723847382,biomeDetailNoise:7089879878979,biomeTypeMoistureNoise:2748927489274,biomeTypeTemperatureNoise:1748927483928,biomeTypeElevationNoise:7384723847938,biomeTypeRiverNoise:3472983472983,worldNoise:1892738192738,detailNoise:3928743928743,oreNoise:1928371928371,worldDetailNoise:4938274938274,worldGenDetailNoise:0xefabe3fe05}),this.nodes.init({noise:e,brush:ut,substanceTool:new gt.j}),this.overWorldGen=new x(this.nodes,ot),this.overWorldGen.init(),V.init(this.nodes),O.init(this.nodes),U.init(this.nodes)}async generate([[e,t,r,s],a]){ut.start(e,t,r,s),this.overWorldGen.generateWorldColumn(t,s),ut.stop()}async decorate([[e,t,r,s],a]){ut.start(e,t,r,s),this.overWorldGen.decorateWorldColumn(t,s),clearTimeout(mt),mt=setTimeout((()=>this.overWorldGen.clearCache()),6e4),ut.stop()}}ht.QK.registerTask("get-biome-image",(([e,t])=>{const r=bt.instance.overWorldGen.generateBiomeTypeImage(e,t);return[r,[r.buffer]]}))}},n={};function d(e){var t=n[e];if(void 0!==t)return t.exports;var r=n[e]={exports:{}};return o[e].call(r.exports,r,r.exports,d),r.exports}d.m=o,d.x=()=>{var e=d.O(void 0,[968,790,388],(()=>d(27572)));return d.O(e)},e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",s=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},d.a=(a,i,o)=>{var n;o&&((n=[]).d=-1);var d,l,c,h=new Set,g=a.exports,u=new Promise(((e,t)=>{c=t,l=e}));u[t]=g,u[e]=e=>(n&&e(n),h.forEach(e),u.catch((e=>{}))),a.exports=u,i((a=>{var i;d=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var i=[];i.d=0,a.then((e=>{o[t]=e,s(i)}),(e=>{o[r]=e,s(i)}));var o={};return o[e]=e=>e(i),o}}var n={};return n[e]=e=>{},n[t]=a,n})))(a);var o=()=>d.map((e=>{if(e[r])throw e[r];return e[t]})),l=new Promise((t=>{(i=()=>t(o)).r=0;var r=e=>e!==n&&!h.has(e)&&(h.add(e),e&&!e.d&&(i.r++,e.push(i)));d.map((t=>t[e](r)))}));return i.r?l:o()}),(e=>(e?c(u[r]=e):l(g),s(n)))),n&&n.d<0&&(n.d=0)},a=[],d.O=(e,t,r,s)=>{if(!t){var i=1/0;for(c=0;c<a.length;c++){for(var[t,r,s]=a[c],o=!0,n=0;n<t.length;n++)(!1&s||i>=s)&&Object.keys(d.O).every((e=>d.O[e](t[n])))?t.splice(n--,1):(o=!1,s<i&&(i=s));if(o){a.splice(c--,1);var l=r();void 0!==l&&(e=l)}}return e}s=s||0;for(var c=a.length;c>0&&a[c-1][2]>s;c--)a[c]=a[c-1];a[c]=[t,r,s]},d.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return d.d(t,{a:t}),t},d.d=(e,t)=>{for(var r in t)d.o(t,r)&&!d.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},d.f={},d.e=e=>Promise.all(Object.keys(d.f).reduce(((t,r)=>(d.f[r](e,t),t)),[])),d.u=e=>e+".bundle.js",d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),d.p="./",(()=>{var e={572:1};d.f.i=(t,r)=>{e[t]||importScripts(d.p+d.u(t))};var t=self.webpackChunkdivinecraft=self.webpackChunkdivinecraft||[],r=t.push.bind(t);t.push=t=>{var[s,a,i]=t;for(var o in a)d.o(a,o)&&(d.m[o]=a[o]);for(i&&i(d);s.length;)e[s.pop()]=1;r(t)}})(),i=d.x,d.x=()=>Promise.all([968,790,388].map(d.e,d)).then(i),d.x()})();